{"ast":null,"code":"var _jsxFileName = \"/home/nixkoo/DeFi-Aplication-/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport JamToken from '../abis/JamToken.json';\nimport StellartToken from '../abis/StellartToken.json';\nimport TokenFarm from '../abis/TokenFarm.json';\nimport Web3 from 'web3';\nimport Navigation from './Navbar';\nimport MyCarousel from './Carousel';\nimport Main from './Main';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  async componentDidMount() {\n    // 1. Carga de Web3\n    await this.loadWeb3(); // 2. Carga de datos de la Blockchain\n\n    await this.loadBlockchainData();\n  } // 1. Carga de Web3\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Accounts: ', accounts);\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('¡Deberías considerar usar Metamask!');\n    }\n  } // 2. Carga de datos de la Blockchain\n\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    console.log(\"Account[0]\", accounts[0]); // Ganache -> 5777, Rinkeby -> 4, BSC -> 97\n\n    const networkId = await web3.eth.net.getId();\n    console.log('networkid:', networkId); // carga del jamToken\n\n    const jamTokenData = JamToken.networks[networkId];\n\n    if (jamTokenData) {\n      const jamToken = new web3.eth.Contract(JamToken.abi, jamTokenData.address);\n      this.setState({\n        jamToken: jamToken\n      });\n      let jamTokenBalance = await jamToken.methods.balanceOf(this.state.account).call();\n      this.setState({\n        jamToken: jamTokenBalance.toString()\n      });\n    } else {\n      window.alert(\"El JamToken no ah sido desplegado xD\");\n    } // carga del stellar token\n\n\n    const stellartTokenData = StellartToken.networks[networkId];\n\n    if (stellartTokenData) {\n      const stellartToken = new web3.eth.Contract(StellartToken.abi, stellartTokenData.address);\n      this.setState({\n        stellartToken: stellartToken\n      });\n      let stellartTokenBalance = await stellartToken.methods.balanceOf(this.state.account).call();\n      this.setState({\n        stellartTokenBalance: stellartTokenBalance.toString()\n      });\n    } else {\n      window.alert(\"el stellarToken no ah sido desplegado xD\");\n    } // carga del TokenFarm\n\n\n    const tokenFarmData = TokenFarm.networks[networkId];\n\n    if (tokenFarmData) {\n      const tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address);\n      this.setState({\n        tokenFarm: tokenFarm\n      });\n      let stakingBalance = await tokenFarm.methods.stakingBalance(this.state.account).call();\n      this.setState({\n        stakingBalance: stakingBalance.toString()\n      });\n    } else {\n      window.alert(\"el tokenFarm no ah sido desplegado en la red xD\");\n    }\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.stakeTokens = amount => {\n      this.setState({\n        loading: true\n      });\n      this.state.jamToken.methods.approve(this.state.tokenFarm._address, ammount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.state.tokenFarm.methods.stakeTokens(ammount).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.unstakeTokens = amount => {\n      this.setState({\n        loading: true\n      });\n      this.setState.TokenFarm.methods.unstakeTokens().sender({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.state = {\n      account: '0x0',\n      loading: true,\n      jamToken: {},\n      jamTokenBalance: '0',\n      stellartToken: {},\n      stellartTokenBalance: '0',\n      tokenFarm: {},\n      stakingBalance: '0'\n    };\n  }\n\n  render() {\n    let content;\n\n    if (this.state.loading) {\n      content = /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"loader\",\n        className: \"text-center\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this);\n    } else {\n      content = /*#__PURE__*/_jsxDEV(Main, {\n        jamTokenBalance: this.state.jamTokenBalance,\n        stellartTokenBalance: this.state.stellartTokenBalance,\n        stakingBalance: this.state.stakingBalance,\n        stakeTokens: this.stakeTokens,\n        unstakeTokens: this.unstakeTokens\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyCarousel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"main\", {\n            role: \"main\",\n            className: \"col-lg-12 d-flex text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content mr-auto ml-auto\",\n              children: content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/nixkoo/DeFi-Aplication-/src/components/Home.js"],"names":["React","Component","JamToken","StellartToken","TokenFarm","Web3","Navigation","MyCarousel","Main","App","componentDidMount","loadWeb3","loadBlockchainData","window","ethereum","web3","accounts","request","method","console","log","currentProvider","alert","eth","getAccounts","setState","account","networkId","net","getId","jamTokenData","networks","jamToken","Contract","abi","address","jamTokenBalance","methods","balanceOf","state","call","toString","stellartTokenData","stellartToken","stellartTokenBalance","tokenFarmData","tokenFarm","stakingBalance","loading","constructor","props","stakeTokens","amount","approve","_address","ammount","send","from","on","hash","unstakeTokens","sender","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport JamToken from '../abis/JamToken.json';\nimport StellartToken from '../abis/StellartToken.json';\nimport TokenFarm from '../abis/TokenFarm.json';\nimport Web3 from 'web3';\n\nimport Navigation from './Navbar';\nimport MyCarousel from './Carousel';\nimport Main from './Main';\n\nclass App extends Component {\n\n  async componentDidMount() {\n    // 1. Carga de Web3\n    await this.loadWeb3()\n    // 2. Carga de datos de la Blockchain\n    await this.loadBlockchainData()\n  }\n\n  // 1. Carga de Web3\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      console.log('Accounts: ', accounts)\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('¡Deberías considerar usar Metamask!')\n    }\n  }\n\n  // 2. Carga de datos de la Blockchain\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    console.log(\"Account[0]\", accounts[0])\n    // Ganache -> 5777, Rinkeby -> 4, BSC -> 97\n    const networkId = await web3.eth.net.getId()\n    console.log('networkid:', networkId)\n\n\n// carga del jamToken\n    const jamTokenData = JamToken.networks[networkId]\n\n    if (jamTokenData) {\n      const jamToken = new web3.eth.Contract(JamToken.abi, jamTokenData.address)\n      this.setState({ jamToken: jamToken })\n      let jamTokenBalance = await jamToken.methods.balanceOf(this.state.account).call()\n          this.setState({ jamToken: jamTokenBalance.toString() })\n    } else {\n      window.alert(\"El JamToken no ah sido desplegado xD\")\n\n    }\n\n// carga del stellar token\n    const stellartTokenData = StellartToken.networks[networkId]\n\n    if (stellartTokenData) {\n      const stellartToken = new web3.eth.Contract(StellartToken.abi, stellartTokenData.address)\n      this.setState({ stellartToken: stellartToken })\n      let stellartTokenBalance = await stellartToken.methods.balanceOf(this.state.account).call()\n      this.setState({ stellartTokenBalance: stellartTokenBalance.toString() })\n \n    }\n    else {\n      window.alert(\"el stellarToken no ah sido desplegado xD\")\n    }\n\n// carga del TokenFarm\n    const tokenFarmData = TokenFarm.networks[networkId]\n\n    if (tokenFarmData) {\n      const tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address)\n      this.setState({ tokenFarm: tokenFarm })\n      let stakingBalance = await tokenFarm.methods.stakingBalance(this.state.account).call()\n      this.setState({ stakingBalance: stakingBalance.toString() })\n\n    }\n    else {\n      window.alert(\"el tokenFarm no ah sido desplegado en la red xD\")\n    } \n    this.setState({ loading: false })  \n  }\n\n\n  stakeTokens = (amount)=> {\n    this.setState({ loading: true })\n    this.state.jamToken.methods.approve(this.state.tokenFarm._address, ammount).send({ from: this.state.account })\n      .on('transactionHash', (hash) => {\n        this.state.tokenFarm.methods.stakeTokens(ammount).send({ from: this.state.account })\n          .on('transactionHash', (hash) => {\n            this.setState({loading: false})\n        })\n      })\n  \n  }\n\n  unstakeTokens = (amount) => {\n    this.setState({ loading: true })\n    this.setState.TokenFarm.methods.unstakeTokens().sender({ from: this.state.account })\n      .on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      loading: true,\n      jamToken: {},\n      jamTokenBalance: '0',\n      stellartToken: {},\n      stellartTokenBalance: '0',\n      tokenFarm: {},\n      stakingBalance: '0',\n    }\n  }\n\n  render() {\n\n    let content\n    if (this.state.loading) {\n      content = <p id=\"loader\" className='text-center'>Loading...</p>\n    } else {\n      content = <Main\n        jamTokenBalance={this.state.jamTokenBalance}\n        stellartTokenBalance={this.state.stellartTokenBalance}\n        stakingBalance={this.state.stakingBalance}\n        stakeTokens={this.stakeTokens}\n        unstakeTokens={this.unstakeTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navigation account={this.state.account} />\n        <MyCarousel />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}